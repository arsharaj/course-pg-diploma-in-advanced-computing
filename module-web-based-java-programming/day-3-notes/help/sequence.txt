Today's Topics

Revision of Java EE basics.
Servlet API , implementation n deployment(using annotations n xml tags)
Servlet JDBC Integration
Page Navigation
Session Management (If time permits)

Extract Java EE docs first


Revision

What is Java EE/Jakarta EE ? 
Specification for primary(basic) services required for any enterprise app.

eg : Servlet, JSP, Conn pooling , security , web services , JPA.....

Why J2EE 1.8/Java EE 8 /Jakarata EE 8
1. supports diff types of clnts(web / app clnt/smart) 
2. server independent
3. rdy made imple.of prim services


What makes Java EE , server independent ?
Separation between specs n imple

Who provides Specs of prim services in J2EE  / Java EE  : Oracle/Sun , Eclipse foundation

Implementation : left to Java EE server vendors

Popular vendors & their products 
(Apache : Tomcat / Tomee, Oracle --Glassfish , Jboss , weblogic....)

Request response flow(Layers)
Request  --- http://www.abc.com:9090/day3.1

URL(Uniform resource locator) : http://www.abc.com:9090/day3.1
URI : 
URL Pattern : 

Clnt sends Request URL --- http://www.abc.com:9090/day3.1
http : protocol /scheme
www.abc.com : DNS qualified host name / can be replaced by IP address
9090 : TCP port
/day3.1 : URI (path)
Typically : starts with web app name(=web context) : ctx root

Server side layers
1. Host hosting web server : DNS : IP 
2. Tomcat web server --TCP (port no)
3. web server ---> WC 
4. web app(=web context) ctx root

What is WC ?
Server side JVM , provides a run time env. to web apps
 
Jobs ---
manages life cycles of web comps , created server req n resp objs,manages session tracking , manages concurrency...

2. What is web.xml? --- deployment descriptor of a web app(per web app)
popualated by --prog (IDE) 
who reads it -- WC
when ---exactly once @ web app dep time
what does it consist of --- xml tags (=> deployment instructions)
eg : welcome file , servlet deployment tags, sec tags, session tags...

Mandatory till Java EE 1.5 , optional later.


J2EE compliant folder structure of dynamic web application
1. WEB-INF : private 
web.xml
<classes> : .class (hidden) --compiled java classes 
<lib> : .jar
eg : JDBC driver , Spring , hibernate JARs


2. root folder : src/main/webapp -- html , js, css , jsp

3. src/main/java : java src files

3. Why servlets : Adds dyn nature to the web app

Job list
1. req processing
2. resp gen.
3. B.L
4. Managing DAO layer
5. Page navigation


What is a servlet ? 
Java class , no main method , dyn web component whose life cycle is managed by WC
life cycle methods : init , service , destroy.




1. 
Servlet API details --refer to diag : "day2-data\day2_help\diags\servlet api.png"  (IMPORTANT)
<Tomcat_Home>\lib ---  specs jar : servlet-api.jar 
implementation left to vendors --Tomcat -- catalina.jar

Servlet  API
1. javax.servlet.Servlet i/f 
5 methods : 3 important life cycle methods
public void init(ServletConfig config) throws ServletException
public void destroy()
public void service(ServletRequest rq,ServletResponse rs) throws ServletException, IOException

2. Imple. class : javax.servlet.GenericServlet : abstract class
concret methods --init , destroy
abstract --service

3. For HTTP specific :
extended by : javax.servlet.http.HttpServlet : abstract class
no abstract method !
Has implemented : public void service(ServletRequest rq,ServletResponse rs) throws ServletException, IOException
---> protected void  service(HttpServletRequest rq,HttpServletResponse rs) throws ServletException, IOException
---> dispatcher -->
chks HTTP method
get --> protected void doGet(HttpServletRequest rq,HttpServletResponse rs) throws ServletException, IOException
post --> doPost
put --> doPut
delete  --> doDelete


Deployment of the servlet 

1. Via annotation
eg : @WebServlet(value="/hello")
public class HelloWorldServlet extends HttpServlet {....}
Meaning : A class level annotation , for WC(run time env) , to add the request mapping between incoming request (url-pattern) n the servlet.


Map : will be created by WC  , at web app deployment time 
key -- /hello
value -- Fully qualified servlet cls name (eg : pages.HelloWorldServlet)

URL : http://host:port/day3.1/hello
URI : /day3.1/hello
URL pattern : /hello

OR 

2. Using XML tags
How to deploy a servlet w/o annotations --- via XML tags
web.xml

<servlet>
 <servlet-name>abc</servlet-name>
<servlet-class>pages.SecondServlet</servlet-class>
</servlet>
<servlet-mapping>
 <servlet-name>abc</servlet-name>
 <url-pattern>/test2</url-pattern>
</servlet-mapping>
WC : map 
key : /test2
value  : pages.SecondServlet

eg URL --http://host:port/day3.1/hello

At the time of web app deployment ---WC tries to populate map of request mappings , from XML tags (from web.xml). Later ---it  will check for @WebServlet annotation


What is default loading policy of WC for servlets (when will WC start life cycle of the servlet) : after any clnt sends the 1st request=> lazy loading

Can you change it to eager ? YES 

HOW ?  
@WebServlet : loadOnStartup 
def value=-1 => lazy loading 
If you supply > 0 =>eager loading n also order of loading.
Use case : Only in case of time consuming init methods
OR
Within <servlet> tag
....
<load-on-startup>1</...>




  



How to read request params sent from the clnt in the servlet ?

javax.servlet.ServletRequest i/f methods
1. public String getParameter(String paramName)

2. public String[] getParameterValues(String paramName)


Start with the case study (online voting)

Objective  : Servlet --JDBC Integration
Steps

0. Copy JDBC Connector JAR(mysql connector)  : <WEB-INF>/lib OR <tomcat> / lib
We will copy it under :  <tomcat> / lib

Layers involved : Servlet --DAO (Uses DBUtils) --POJO -- DB

Refer case study : Online Voting
Design (refer : servlet-jdbc-integration.png)

1. Table : users
2. POJO : User
3. Create DBUtils : 
3.1 open fixed DB connection : opens the fixed con to DB n return it to the caller.
3.2 close connection


4. DAO : UserDao i/f  n implementation class

6. welcome page : login.html(post) --> LoginServlet

7. --> LoginServlet
7.1 --init : dao instance  , destroy : dao's cleanup , doPost : auth user method

Method overridng rule regarding exc handling
Overriding form of the method(i.e in sub class) CAN NOT add any NEW or BROADER checked excs.

eg : super cls method : throws IOException
which is legal ?

1. sub cls method throws IOException
2. sub cls method throws Exception
3. sub cls method throws EOFException
4. sub cls method throws SqlException
5. sub cls method throws NullPointerException

Ans : 


8. Centralized exc handling in Servlets
How ?
@Override
public void init() throws ServletException
{
try {
  open connection
  create dao inst
} catch(Exception e)
{
//re throw the exception back to WC , so that WC doesn't continue to service.
  throw new ServletException("err in init" +getClass(),e);
}
}


API of javax.servlet.ServletException
Constructor :
public ServletException(String message,Throwable rootCause)


Objective : 
Complete login--logout flow in current app
(login.html -- LoginServlet --successful login --check the role 
If admin --redirect  to admin servlet
If voter , who has not yet voted -- redirect  to candidate list page
If voter , who has already  voted -- redirect  to logout page

9. How to redirect ?

Refer : "day3-data\day3_help\page navigation\page navigation techniques.txt"

10. Do you see any problems after redirect ?



Problem cause 

Solution

11. Enter : Session Tracking

---------------------------

Extra recommended Reading :
For Complete list of HTTP response status codes :
refer : https://www.restapitutorial.com/httpstatuscodes.html


