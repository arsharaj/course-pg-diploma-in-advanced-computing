Today's topics

Revision of 
1. Spring Beans life cycle
2. Discuss different ways of D.I(modes of wiring)
Then Enter 
Auto wiring
Hybrid approach (lesser xml + majority annotations)
Java config class + annotations(If time permits !)
Spring MVC
Spring MVC n Hibernate integration (lab activity)
-------------------------
Why D.I : To support loose coupling between layers(controller--service-dao)
What is D.I ?
Instead of dependent objects managing their dependencies ---SC will be managing them auto.(wiring /collaboration bet. depnts n depcys)

What is IoC ?Inversion of Control --ensures loose coupling (any time nature of depcy changes , SC creates a new depcy n makes it avlable to depnt @run time)


What are 2 i/ps SC needs from the programmer ? 
Spring beans (=any java obj whose life cycle is managed by SC)
+ metadata instrs 

What are 3 different ways of supplying metadata instructions to SC
Pure XML tags
OR
Hybrid : less XML + majority annotations
OR 
NO XML (java config class) + majority annotations


1.Pure XML based approach(legacy)
<bean> tag attributes
id , class , scope , lazy-init , init-method , destroy-method , factory-method

IMPORTANT : Configure singleton beans : stateless
(i.e NEVER add any client specific details as a state of the singleton beans / servlets)

eg : In UserController : singleton 
If you add a field
private UserService userService;
Is it a correct or wrong design ?  correct!
If you add : email ,password , name : COMPLETELY WRONG!!!!
(Since single instance will be shared across multiple clnts /request --data will overwritten)


prototype : => SC creates a separate  instance of the bean : as per demand i.e getBean)
lazy-init : def value =false (applicable to ONLY singleton beans)

init-method : name of custom init method
pattern : public void anyName() throws Exc {....}
Will be invoked for singleton as well as prototype beans

destroy-method : name of custom destroy  method : SC invokes it just before GC
pattern : public void anyName() throws Exc {....}
Will be invoked only for  singleton beans

factory-method : to supply the name of the factory method , in factory method based DI


SC API (refer to a diagram)


Understand Spring bean life cycle (refer to a diagram)

Different Modes of Wiring (D.I.) : (refer to a diagram)

Enter auto wiring 
autowire=no(default:explicit wiring)|byName|byType|constructor



2. Hybrid Approach (reduced XML , reduced Java code  n majority annotations)
(refer to readme : "spring sequence for annotations")

eg : UserController : dependency : UserService : i/f  , (UserServiceImpl) : impl class

@AutoWired //=> autowire=byType
private UserService myUserService;
What if : SC comes across multiple matches :
What if : SC doesn't find even a single match : 

eg : UserController : dependency : UserService : i/f  , (UserServiceImpl) : impl class
@AutoWired (required=false) //=> autowire=byType
private UserService myUserService;
What if : SC comes across multiple matches : 
What if : SC doesn't find even a single match : 



eg : UserController : dependency : UserService : i/f  , (UserServiceImpl) : impl class
@AutoWired 
@Qualifier("abc") //=> autowire=byName
private UserService myUserService;
What if : SC comes across exactly 1 match :
What if : SC comes across multiple matches : 
What if : SC doesn't find even a single match : 

OR

@Resource(name="abc") //=> autowire=byName (Java EE annotation)
private UserService myUserService;



3. Modern way of supplying meta data instructions to SC 
Java Config class/es + annotations
3.1 How to tell SC , following class containg java config 
@Configuration : class level mandatory annotation (It will auto enable anno support)
(equivalent to context:annotation-config)

3.2 <context:component-scan.../>
@ComponentScan(String[] basePkgNames)

3.3 To configure Java objects as spring beans --one way is supplying annos : eg --@Component,@Controller,@Service.....
OR
@Bean =><bean id ,class ...../>

3.4 Instead of starting xml based SC , use 
BeanFactory <---- ApplicationContext <---- AnnotationConfigApplicationContext ,
 to boot SC using java config class + annotations

-----------------------Enter MVC-------------------------------

What is MVC ?
Model-View-Controller --Standard design pattern , meant for separation of concerns(=tasks=responsibilities)

Custom implementation of the MVC pattern : 
Model -- Java Bean (conversational state holder + B.L supplier) & POJOs

View layer --JSP , Thymeleaf/velocity/Angular/React/Vue/Next JS
Represents UI / presentation logic  (processing requests & generating response)

Controller -- Typically a servlet(used in Spring MVC ) or a filter(used in Struts 2 framework)
Manages navigation(routing)  & beans.

Front Controller -- Additional design pattern -- which ensures ANY request coming from ANY client , for this web app , will be intercepted by a common gate keeper(or a centralized dispatcher)
It will dispatch clnt request to further components , based upon nature of the req.

MVC flow (without spring)

refer : MVC diagrams , MVC Details
mvc-overview.png

 
Implementation using servlet / JSP & JavaBean  --Shared as a readymade demo.
Refer to : eclipse projects\mvc_hibernate_demo
Flow  diagram : mvc-flow.png

Enter Spring MVC
(Refer : "day14-data\day14_help\Spring MVC\steps for spring mvc.txt")

Objectives
1. Test Spring MVC Flow
2. Deliver/render the index.jsp from SC (using spring MVC architecture)
3. Test Model n View
4. Test Model Map
5. Enter Case study (EMS) 
5.1 List All Departments
(Attach data to a drop drown list)
5.2 Allow user to choose a dept
5.3 Display all emps from a chosen dept.
.....

