Today's  topics
After Revision of 
POJO/Entity state transitions n Session API

Bulk Update
Delete n bulk delete
Blob handling(bin content storing n restoring)
Advanced hibernate : inheritance n association between entities
Before EOD : Discuss integration of hibernate with web app

Hibernate property from config file : 
current_session_context_class=thread
=> Applicable only for getCurrentSession() 
When you call , sf.getCurrentSession() : hib checks if there is alrdy existing hib session bound to CURRENT THREAD. If yes -- rets EXISTING session , o.w creates a new one.

Revise 
Name the states of Entities managed by hibernate
1. Transient : not a part of L1 cache n doesn't have DB rec
Which Session APIs cause transient --> persistent : save | persist | saveOrUpdate | merge
After calling above API --entity exists in L1 cache , BUT still no db identity
What will happen upon commit ?
1. session.flush()
2. auto dirty checking --tries to synchronize state of L1 cache with that of DB , if no changes --no DMLs, yes : new entity in L1 --insert ,in case of modified state : update , entity marked for deletion : delete 
queries fired on DB
3. session.close --> L1 cache is destroyed n pooled out db cn rets to cn pool.


2. Persistent : a part of L1 cache .
(transient --> persistent) : gains DB id upon commit.
Does not exist ---> Persistent (get | JPQL|load) -- has DB id.

3. Detached : not a part of L1 cache n HAS a DB rec
Triggers : session.close() , evict , clear

Persistent vs Detached 
If you modify (setters) state of Persistent entity --hibernate tracks these changes n synchronizes  these changes in DB (upon commit)

If you modify (setters) state of Detached entity --hibernate Will NOT track these changes n does not synch up these changes in DB (upon commit)

Solve
Given : Customer POJO with usual fields exist.
property servicePlan : enum (GOLD/SILVER/PLATINUM)
Display details of all customers who have chosen a specific plan.
eg : DAO 
Session session=getSf().getCurrentSession();
Transaction tx=session.beginTransaction();
List<Customer> customers=null;
try {
  customers=session.createQuery("select c from Customer c where c.servicePlan=:plan",Customer.class).setParameter("plan", custPlan).
.getResultList();
tx.commit();
}catch --RunTimeExc --tx.rollback(), throw e;



1. Understand save vs persist vs saveOrUpdate vs merge
2. evict n clear
Ref : "day10-data\day10_help\hibernate session api.txt"

3 Increment salaries of all emps joined before a specific date.
eg : i/p -- increment , date
jpql="select e from Employee e where e.joinDate < :dt";
....//select
list.forEach(e -> e.setSalary(...));
tx.commit();//multiple update queries
OR
directly using update
String jpql="update Employee e set e.salary=e.salary+:incr where e.joinDate < :dt";


3.1 Session API
public Query<T> createQuery(String jpql) throws HibernateException
jpql -- DML

3.2 Query API
public int executeUpdate() throws HibernateException
--use case --DML



4. Delete emp details
i/p emp id / email
o/p emp details removed from DB
Hint : Session API : 
Details 
Removed : 
Trigger : session.delete(persistenEntRef);hib simply marks the entity for removal
state : Removed (exists in L1 cache , exists in DB)
Upon commit
as a result of dirty chking -- delete query --not a part of db
session.close() --> not a part of L1 cache.
--> transient 


5. Lab work
Objective --delete all emps of specified employment type
via Bulk delete
String jpql="delete from Employee e where e.empType=:type";
-------------------------------------
PENDING (Will be done in the next week)

6. Save n restore images to / from DB
FileUtils class from Apache commons-io

Methods 

1. public static byte[] readFileToByteArray(File file)
                                  throws IOException
Reads the contents of a file into a byte array. The file is always closed.

2. public static void writeByteArrayToFile(File file,
                        byte[] data)
                                 throws IOException
Writes a byte array to a file creating the file if it does not exist.

Steps to Store bin contents in DB
i/p : emp id , image file path
o/p : mesg
1. Get persistent emp (session.get)
2. not null => emp persistent
3. validate file --> yes --> readFileToByteArray
4. invoke setter : setImage


Steps to  ReStore bin contents from  DB n store it in a bin file
i/p : emp id , new image file path
1. Get persistent emp (session.get)
2. not null => emp persistent
3. emp.getImage : byte[] data-- > chk for null --if not null

4. FileUtils.writeByteArrayToFile(new File(newImgPath),data)

----------------------------------------------------------
Advanced Hibernate 

Inheritance in JPA/Hibernate

First inheritance strategy : 
1.Annotation : javax.persistence.MappedSuperclass
Class level annotation , to be added on abstract or concrete super class
Hibernate will NOT generate any table for it.
One can add all common fields in this class
All other entities can extend n inherit from the common super class


2. Associations between Entities (HAS-A) : weaker form of association => aggregation (since Entities have a standalone life cycle , have a separate DB  Identity in form of a seaprate table n it's  PK)

Ref : EMS E-R diagram

Department   1<------>* Employee

eg : Employee n Department
Employee : child , many, owning ( since it contains FK column)
Department : parent , one , non-owning(inverse)

Technical terms : parent/child , one side/many , (non-owning)inverse side/owning

owning side of the association -- side which contains the FK (physical mapping)
non owning(inverse) side of the asso -- side which DOES NOT conatain the FK 

2 Types of associations 
uni directional
OR
bi directional

Directionality concept exists ONLY in Object world

Uni directional association : the one in which you can navigate only from 1side to another.

Bi directional association : you can navigate the association from any side.

eg : Course 1<----->*   Student 

Identify the relationship between : Department n Employee
Bi dir relationship

eg : Department 1 <------> * Employee
(Bi dir relationship , one to many n many to one) 

Department : one , parent , non owning

Employee : many , child , owning (contains FK dept_id ---> PK of depts table)

Steps 
Configure Entities 
1. Department : extends BaseEntity
Fields : name , location 
+private List<Employee> empList=new ArrayList<>();//As per Gavin King's suggestion always init collection based property to empty collection (to avoid NPExc. while adding /removing the child elements)
generate : setters n getters.


2. Employee : extends BaseEntity
Fields : firstName..... +
private Department selectedDept;
Add setter n getter



Problems n solutions

1.What will happen if you don't add any association mapping annotations?
Observation : org.hibernate.MappingException is thrown !
Why ?  Hibernate CAN NOT figure out the type of association , between the entities.
Solution : Add annotation .

JPA Annotations for E-R
@OneToOne
@ManyToOne
@OneToMany
@ManyToMany


2. After adding @ManyToOne n @OneToMany , no MappingException.
BUT how many tables were created by hibernate ?  3 (eg : emps,depts ,depts_emps)

Is the link table  really required for establishing one to many bi dir asso ? NO
Simpler way : FK


3. Reason behind additional table : Hibernate can't identify which is owning n inverse side of the association

Solution : In a bi dir association : It's mandatory to   add mappedBy : property 
in @OneToMany .
 
Which side should it appear : inverse(eg : Department)
What should be the value of mappedBy = Name of the association property , as it appears in the owning side
eg : In Department class : add
@OneToMany(mappedBy = "selectedDept")
private List<Employee> empList = new ArrayList<>();

4. How to customize name of FK column ?
eg : 
@JoinColumn(name="dept_id")
private Department selectedDept;


5. Project Tip (suggestion from Gavin King)
In case of bi-dir associations , instead of adding complex logic in DAO or Tester ,
Add helper methods in the POJO layer itself 
1. To add child entity
2. To remove a child entity
eg : In Department class ,
addEmp n removeEmp

Objectives 
1. Launch a new department (w/o emps)
i/p : dept details
o/p : mesg
Session API : public void persist(Object transientRef) 


2. Hire emp for a specific dept
i/p : emp details....+dept id 
o/p : mesg



https://vladmihalcea.com/a-beginners-guide-to-acid-and-database-transactions/
https://thorben-janssen.com/ultimate-guide-association-mappings-jpa-hibernate/